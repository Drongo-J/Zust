@model Zust.Entities.Models.Post;
@using Microsoft.AspNetCore.Identity;
@using Zust.Entities.Models;
@using Zust.Web.Helpers.ConstantHelpers;
@{
    var userManager = Context.RequestServices.GetService<UserManager<User>>();
    var currentUser = await userManager.GetUserAsync(Context.User);
    ViewData["Title"] = $"Zust - Post - ${Model.Description}";
}

<!-- Links of CSS files -->
<link rel="stylesheet" href="~/assets/css/bootstrap.min.css">
<link rel="stylesheet" href="~/assets/css/animate.min.css">
<link rel="stylesheet" href="~/assets/css/remixicon.css">
<link rel="stylesheet" href="~/assets/css/flaticon.css">
<link rel="stylesheet" href="~/assets/css/jquery-ui.min.css">
<link rel="stylesheet" href="~/assets/css/magnific-popup.min.css">
<link rel="stylesheet" href="~/assets/css/simplebar.min.css">
<link rel="stylesheet" href="~/assets/css/metismenu.min.css">
<link rel="stylesheet" href="~/assets/css/owl.carousel.min.css">
<link rel="stylesheet" href="~/assets/css/owl.theme.default.min.css">
<link rel="stylesheet" href="~/assets/css/style.css">
<link rel="stylesheet" href="~/assets/css/responsive.css">


<style>
    #post-area {
        width: 35%;
        align-self: center;
    }

    @@media only screen and (max-width: 1000px) {
        #post-area {
            width: 100%;
        }
    }

    ul {
        list-style: none;
    }

    .number {
        margin-left: 4px;
    }

    .icon {
        margin-right: 5px;
    }

    .form-group,
    .post-footer {
        display: flex;
    }

    #like-button {
        cursor: pointer !important;
    }
</style>

<div class="news-feed justify-content-between news-feed-post" id="post-area">
    <div class="post-header d-flex align-items-center">
        <div class="image">
            <a href="/home/users?id=@Model.UserId"><img src="@Model.User.ImageUrl" style="max-height: 80px; max-width: 80px;" class="rounded-circle" alt="image"></a>
        </div>
        <div class="info ms-3" style="display: flex !important; flex-direction: column !important; justify-content: start !important;">
            <span class="name"><a href="/home/users?id=@Model.UserId">@Model.User.UserName</a></span>
            <span class="small-text"><a id="dateDiff">0</a></span>
        </div>
    </div>

    <div class="post-body">
        <p class="mt-3">@Model.Description</p>
        <div class="post-image" style="display: flex; justify-content: center;">
            <img src="@Model.ContentUrl" alt="image" style="max-height: 600px; align-self: center;">
        </div>
        <ul class="post-meta-wrap d-flex justify-content-between align-items-center mt-4">
            <li class="post-react">
                <a id="like-button" onclick="likePost()">
                    <i class="icon flaticon-like"></i>
                    <span id="like-text"></span>
                    <span class="number" id="like-count">0</span>
                </a>
            </li>
            <li class="post-comment">
                <a><i class="icon flaticon-comment"></i><span>Comment</span> <span class="number" id="comment-count">0</span></a>
            </li>
            <li class="post-share">
                <a><i class="icon flaticon-share"></i><span>Share</span> <span class="number"></span></a>
            </li>
        </ul>

        <hr />

        <div class="post-comment-list" id="comments">
        </div>

        <div id="showMore" class="more-comments" style='text-align: center; margin-top: 5px; margin-bottom: 13px; cursor: pointer;'>
            <a onClick='showComments()'>More Comments+</a>
        </div>`

        <form class="post-footer">
            <div class="footer-image">
                <a href="/home/my-profile"><img src="@currentUser.ImageUrl" style="max-height: 80px; max-width: 80px;" class="rounded-circle" alt="image"></a>
            </div>
            <div class="form-group" style="width: 100%; position: relative; padding-left: 5px;">
                <textarea name="message" class="form-control" placeholder="Write a comment..." padding-right: 40px; min-height:60px;"></textarea>
                <label style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%);">
                    <a href="#"><i class="ri-send-plane-line"></i></a>
                </label>
            </div>
        </form>
    </div>
</div>

<script src="~/assets/js/jquery.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="~/assets/js/functions.js"></script>
<script src="~/assets/js/bootstrap.bundle.min.js"></script>
<script src="~/assets/js/jquery.magnific-popup.min.js"></script>
<script src="~/assets/js/jquery-ui.min.js"></script>
<script src="~/assets/js/simplebar.min.js"></script>
<script src="~/assets/js/metismenu.min.js"></script>
<script src="~/assets/js/owl.carousel.min.js"></script>
<script src="~/assets/js/wow.min.js"></script>
<script src="~/assets/js/main.js"></script>

<script>

    var item = document.getElementById("dateDiff");
    var createdAt = '@Model.CreatedAt';
    item.innerHTML = getDateTimeDifference(createdAt);

    var postId = '@Model.Id.ToString()';
    async function setLikeCount() {
        var likeCount = await makeAjaxRequest("/api/Like/GetPostLikeCount?postId=" + postId);
        document.getElementById("like-count").innerHTML = likeCount;
    }
    setLikeCount();

    var currentUserId = '@currentUser.Id.ToString()';
    async function setIsLiked() {
        var isLiked = await makeAjaxRequest(`/api/Like/UserLikedPost?userId=${currentUserId}&postId=${postId}`, "GET");

        var element = document.getElementById("like-text");
        if (isLiked) {
            element.innerHTML = "Unlike";
        }
        else {
            element.innerHTML = "Like";
        }
    }
    setIsLiked();

    function createCommentHtml(comment) {
        var content = `
                             <div class="comment-list mt-3">
                                    <div class="comment-image">
                                        <a href="/home/users?id=${comment}"><img src="${comment.user.imageUrl}" class="rounded-circle" alt="image" style="max-heigth:60px; max-width: 60px; background-color: gray;"></a>
                                        <a href="/home/users?id=${comment}" class="padding-left: 10px;">${comment.user.userName}</a>
                                    </div>
                                    <div class="comment-info">
                                        <p>${comment.text}</p>
                                    </div>
                                </div>

                                <hr/>`;

        return content;
    }

    function likePost() {
        const likeButton = document.getElementById(`like-button`);

        likeButton.classList.add('liked');

        const likeCountElement = document.getElementById(`like-count`);

        var text = document.getElementById("like-text");

        if (text) {
            if (text.innerText === 'Like') {
                makeAjaxRequest(`/api/Like/LikePost?postId=${postId}`, 'POST')
                    .then(updatedLikeCount => {
                        if (likeCountElement) {
                            likeCountElement.textContent = updatedLikeCount;
                        }
                    })
                    .catch(error => {
                        alert('Error liking the post:', error);
                        likeButton.classList.toggle('liked');
                    });

                text.innerText = 'Unlike';
            } else {
                makeAjaxRequest(`/api/Like/UnlikePost?postId=${postId}`, 'POST')
                    .then(updatedLikeCount => {
                        if (likeCountElement) {
                            likeCountElement.textContent = updatedLikeCount;
                        }
                    })
                    .catch(error => {
                        alert('Error unliking the post:', error);
                        likeButton.classList.toggle('liked');
                    });
                likeButton.classList.remove("liked");
                text.innerText = 'Like';
            }
        }
    }

    var postComments = null;

    async function setPostComments() {
        var result = await makeAjaxRequest("/api/Post/GetCommentsOfPost?postId=" + postId, "GET");
        postComments = result;
        console.log(postComments);
    }

    var commentContainer = document.getElementById("comments");
    var takeCount = 4;
    var postCountInView = 0;

    async function showComments() {
        if (postComments === null) {
            await setPostComments();
        }

        if (postComments.length === 0) {
            var html = getNoResultHtml("No Notifications", "You haven't received any notifications.");
        }
        else {
            var comments = postComments.splice(postCountInView, takeCount);
            postCountInView += takeCount;
            for (var i = 0; i < comments.length; i++) {
                var comment = comments[i];
                var commentHtml = createCommentHtml(comment);
                commentContainer.innerHTML += commentHtml;
            }

            if (postCountInView === postComments.length) {
                document.getElementById("showMore").style.display = 'none';
            }
        }
    }

    showComments();
</script>