@using Zust.Web.Helpers.ConstantHelpers
@using Microsoft.AspNetCore.Identity;
@using Zust.Entities.Models;
@{
    var userManager = Context.RequestServices.GetService<UserManager<User>>();
    var user = await userManager.GetUserAsync(Context.User);
    ViewData["Title"] = "Zust - Notifications";
}

<style>
    .transparent-button {
        background-color: transparent;
        border: 1px solid transparent;
    }

    .item {
        width: 600px; /* Increase the width to your desired value */
    }

    @@media only screen and (max-width: 700px) {
        .item {
            width: 100%;
            /*background-color: red;*/
        }

        #notificationsBody {
            width: 100%;
            /*background-color: green;*/
            margin: 0px;
        }

        .all-notifications-body {
            padding: 0px;
            margin: 0px;
            width: 100%;
            /*background-color: yellow;*/
        }
    }

    /*    .icon a {
            margin-right: 10px;
        }*/

    .custom-spinner-color {
        color: var(--main-color);
    }

    #spinner {
        margin: auto;
        margin-top: 10px;
    }

    #container {
        margin-top: 0px;
        margin-bottom: 0px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .isRead,
    .notRead{
        height: 15px;
        width: 15px;
        border-radius: 50%;
        background-color: var(--main-color);
        margin-top: -2px;
    }

    .icon{
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 15px;
    }
</style>

<div class="all-notifications-body" id="container">

    <div class="all-notifications-header d-flex justify-content-between align-items-center">
        <h3 class="text-center w-100">Notifications</h3>
    </div>

    <div id="notificationsBody">
    </div>

    <div class="load-more-posts-btn">
        <button id="loadMore" class="transparent-button" onclick="showNotifications()"><i class="flaticon-loading"></i> Load More</button>
    </div>
</div>

<script src="~/assets/js/jquery.min.js"></script>
<script src="~/assets/js/functions.js"></script>
<script>
    var currentUserId = '@user.Id.ToString()';

    async function setNotificationSeemed(notification){
        await makeAjaxRequest("/api/Notification/SetNotificationRead?notificationId=" + notification.id, "POST");
    }

    localStorage.setItem('activeMenuItem', '#4');

    function createNotificationHtml(notification) {
        var dateDiff = getDateTimeDifference(notification.date);
        var notRead = '';
        if (!notification.isRead){
            notRead = 'notRead';
        }

        var content = `
                    <div class="item d-flex justify-content-between align-items-center">
                          <div class="figure">
                                    <a href="/home/users?id=${notification.fromUserId}"><img src="${notification.fromUser.imageUrl}" class="rounded-circle" style="height: 70px !important; width: 70px !important; object-fit:cover;" alt="image"></a>
                        </div>
                        <div class="text">
                            <h4><a href="/home/users?id=${notification.fromUserId}">${notification.fromUser.userName}</a></h4>
                            <span>${notification.message}</span>
                            <span class="main-color">${dateDiff}</span>
                        </div>
                        <div class="icon">
                                <div class='${notRead}'></div>
                                <a onClick=removeNotification()><i class="flaticon-x-mark"></i></a>
                        </div>
                    </div>
                `;
        return content;
    }

    var allNotifications = null;

    async function setAllNotifications() {
        var result = await makeAjaxRequest("/api/Notification/GetNotificationsOfUser?userId=" + currentUserId, "GET");
        result.sort((a, b) => new Date(a.date) - new Date(b.date)).reverse();
        allNotifications = result;
    }

    var contaier = document.getElementById("notificationsBody");
    var notificationCountInView = 0;
    var takeCount = 25;

    async function showNotifications() {
        if (allNotifications === null) {
            await setAllNotifications();
        }

        if (allNotifications.length === 0) {
            var html = getNoResultHtml("No Notifications", "You haven't received any notifications.");
            contaier.innerHTML = html;
        }
        else {
            var notifications = allNotifications.splice(notificationCountInView, takeCount);
            notificationCountInView += notifications.length;
            console.log(notifications.length);
            console.log(notificationCountInView);
            for (var i = 0; i < notifications.length; i++) {
                var notification = notifications[i];
                await setNotificationSeemed(notification);
                var notificationHtml = createNotificationHtml(notification);
                contaier.innerHTML += notificationHtml;
            }
        }

        if (allNotifications.length === notificationCountInView){
            document.getElementById("loadMore").style.display = 'none';
        }
    }

    showNotifications();
</script>
